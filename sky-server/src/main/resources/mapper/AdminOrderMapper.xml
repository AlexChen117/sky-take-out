<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sky.mapper.AdminOrderMapper">
    <update id="update">
        update orders
        <set>
            <if test="number!= null">number = #{number},</if>
            <if test="status!= null">status = #{status},</if>
            <if test="userId!= null">user_id = #{userId},</if>
            <if test="addressBookId!= null">address_book_id = #{addressBookId},</if>
            <if test="orderTime!= null">order_time = #{orderTime},</if>
            <if test="checkoutTime!= null">checkout_time = #{checkoutTime},</if>
            <if test="payMethod!= null">pay_method = #{payMethod},</if>
            <if test="payStatus!= null">pay_status = #{payStatus},</if>
            <if test="amount!= null">amount = #{amount},</if>
            <if test="remark!= null">remark = #{remark},</if>
            <if test="phone!= null">phone = #{phone},</if>
            <if test="address!= null">address = #{address},</if>
            <if test="userName!= null">user_name = #{userName},</if>
            <if test="consignee!= null">consignee = #{consignee},</if>
            <if test="cancelReason!= null">cancel_reason = #{cancelReason},</if>
            <if test="rejectionReason!= null">rejection_reason = #{rejectionReason},</if>
            <if test="cancelTime!= null">cancel_time = #{cancelTime},</if>
            <if test="estimatedDeliveryTime!= null">estimated_delivery_time = #{estimatedDeliveryTime},</if>
            <if test="deliveryStatus!= null">delivery_status = #{deliveryStatus},</if>
            <if test="deliveryTime!= null">delivery_time = #{deliveryTime},</if>
            <if test="packAmount!= null">pack_amount = #{packAmount},</if>
            <if test="tablewareNumber!= null">tableware_number = #{tablewareNumber},</if>
            <if test="tablewareStatus!= null">tableware_status = #{tablewareStatus},</if>
        </set>
        where id = #{id};
    </update>
    <update id="updateOutTimeOrder">
        update orders
        set status        =6,
            cancel_reason = '超时自动取消',
            cancel_time   = now()
        where order_time <![CDATA[<]]> (now() - INTERVAL 15 MINUTE)
          and status = 1
          and pay_status = 0
    </update>
    <update id="updateCompleteOrders">
        update orders
        set status = 5
        where status = 4
    </update>

    <select id="findOrders" resultType="com.sky.entity.Orders">
        select id, number, status, user_id, address_book_id, order_time, checkout_time, pay_method, pay_status, amount,
        remark, phone, address, user_name, consignee, cancel_reason, rejection_reason, cancel_time,
        estimated_delivery_time, delivery_status, delivery_time, pack_amount, tableware_number, tableware_status
        from orders
        <where>
            <if test="number != null">and number like concat('%',#{number},'%')</if>
            <if test="phone != null">and phone like concat('%',#{phone},'%')</if>
            <if test="status != null">and status = #{status}</if>
            <if test="beginTime != null and endTime != null">and order_time between #{beginTime} and #{endTime}</if>
        </where>
        order by order_time desc
    </select>
    <select id="turnoverStatistics" resultType="java.util.Map">
        select temp_tab.day,
               (select ifnull(sum(amount), 0) amount
                from orders
                where DATE(order_time) = temp_tab.day
                  and status = 5) turnover
        from (select #{begin} + interval temp.n DAY day
              from (select 0 n
                    union
                    select 1
                    union
                    select 2
                    union
                    select 3
                    union
                    select 4
                    union
                    select 5
                    union
                    select 6
                    union
                    select 7
                    union
                    select 8
                    union
                    select 9
                    union
                    select 10
                    union
                    select 11
                    union
                    select 12
                    union
                    select 13
                    union
                    select 14
                    union
                    select 15
                    union
                    select 17
                    union
                    select 18
                    union
                    select 19
                    union
                    select 20
                    union
                    select 21
                    union
                    select 22
                    union
                    select 23
                    union
                    select 24
                    union
                    select 25
                    union
                    select 26
                    union
                    select 27
                    union
                    select 28
                    union
                    select 29
                    union
                    select 30) as temp) as temp_tab
        where temp_tab.day between #{begin} and #{end}
    </select>
    <select id="ordersStatistics" resultType="java.util.Map">
        select tab.total_number, tab.complete_number, ROUND(tab.complete_number / tab.total_number, 4) round
        from (select count(*)                                    total_number,
                     count(if(pay_status = 1, pay_status, null)) valid_number,
                     count(if(status = 5, status, null))         complete_number
              from orders
              where order_time between #{begin} and #{end}) tab;
    </select>
    <select id="ordersStatisticsNumber" resultType="java.util.Map">
        select temp.day,count(orders.id) total , count(if(status=5,status,null)) valid_number
        from (
        <foreach collection="list" item="item" separator="union" index="index">
            select #{item}
            <if test="index == 0">
                day
            </if>
        </foreach>
        ) as temp
        left join orders on DATE(orders.order_time)=temp.day
        group by temp.day
    </select>
    <select id="export" resultType="java.util.Map">
        select ROUND(temp.complete / temp.paid, 2)                   as round,
               temp.amount                                           as amount,
               temp.avg                                              as avg,
               temp.complete                                         as complete,
               (select count(*)
                from user
                where DATE(create_time) between #{begin} and #{end}) as new_user
        from (select ifnull(sum(if(status = 5, amount, null)), 0)                                         amount,
                     (ifnull(sum(if(status = 5, amount, null)), 0) / count(if(status = 5, status, null))) avg,
                     count(if(pay_status = 1, pay_status, null))                                          paid,
                     count(if(status = 5, status, null))                                                  complete
              from orders
              where DATE(order_time) between #{begin} and #{end}) as temp
    </select>
    <select id="allExport" resultType="java.util.Map">
        select temp2.day,
        temp2.amount,
        temp2.number_valid_orders,
        ifnull(temp2.customer_unit_price, 0) customer_unit_price,
        temp2.number_new_users,
        ROUND(ifnull(temp2.number_completed_orders / temp2.number_valid_orders, 0) * 100, 2) order_completion_rate
        from (select temp1.day,
        (select ifnull(sum(if(status = 5, amount, null)), 0)
        from orders
        where date(order_time) = temp1.day) amount,
        (select count(if(pay_status = 1, pay_status, null))
        from orders
        where date(order_time) = temp1.day) number_valid_orders,
        (select count(if(status = 5, status, null))
        from orders
        where date(order_time) = temp1.day) number_completed_orders,
        (select (ifnull(sum(if(status = 5, amount, null)), 0) / count(distinct user_id))
        from orders
        where date(order_time) = temp1.day) customer_unit_price,
        (select count(*) count
        from user
        where date(create_time) = temp1.day) number_new_users
        from (
        <foreach collection="list" item="item" separator="union" index="index">
            select #{item}
            <if test="index == 0">
                day
            </if>
        </foreach>
        ) temp1) temp2
    </select>
</mapper>







